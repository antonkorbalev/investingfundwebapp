@model InvestingApp.Models.GeneralInvestingInfo
@using System.Globalization;

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{ 
    var ticksCount = Model.Data.Count() / 4;
}

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
      google.charts.load('current', {'packages':['corechart']});
      google.charts.setOnLoadCallback(drawCharts);

      function drawCharts() {
          drawBalancesChart();
          drawProfitsChart();
      }

      function drawBalancesChart() {
          @{
              var bxs = new MvcHtmlString(string.Join(",", Model.Data.Select(o => string.Format("'{0}'", o.DateTimeStamp.ToString("MMM d yyyy", CultureInfo.InvariantCulture)))));
              var by1s = new MvcHtmlString(string.Join(",", Model.Data.Select(o => o.Balance.ToString("0.00", CultureInfo.InvariantCulture))));
          }
          var xs = [@bxs];
          var y1s = [@by1s];

          var data = new google.visualization.DataTable();
          data.addColumn('string', 'Date');
          data.addColumn('number', 'Balances, RUB');
          for (i = 0; i < xs.length; i++) {
              data.addRow([xs[i].toString(), y1s[i]]);
          }
          var options = {
              title: 'Total funds and profit',
              curveType: 'function',
              legend: { position: 'bottom' },
              hAxis: { showTextEvery: @ticksCount }
          };

          var chart = new google.visualization.LineChart(document.getElementById('balances_chart'));

          chart.draw(data, options);
      }
    function drawProfitsChart() {
        @{
            var pxs = new MvcHtmlString(string.Join(",", Model.ProfitsPerMonth.Select(o => string.Format("'{0}'", o.Description))));
            var py1s = new MvcHtmlString(string.Join(",", Model.ProfitsPerMonth.Select(o => o.Value.ToString("0.00", CultureInfo.InvariantCulture))));
            var py2s = new MvcHtmlString(string.Join(",", Model.ProfitsPerMonth.Select(o => o.Percent.ToString("0.00", CultureInfo.InvariantCulture))));
        }
         var xs = [@pxs];
         var y1s = [@py1s];
         var y2s = [@py2s];

         var data = new google.visualization.DataTable();
         data.addColumn('string', 'Month');
         data.addColumn('number', 'Profit, RUB');
         data.addColumn('number', 'Profit, %');

         for (i = 0; i < xs.length; i++) {
             data.addRow([xs[i].toString(), y1s[i], y2s[i]]);
         }
         var options = {
             title: 'Profits per month',
             curveType: 'function',
             legend: { position: 'bottom' },
             vAxes: {0: {
                 gridlines: {color: 'transparent'},
             },
                 1: {
                     gridlines: {color: 'transparent'},
                     format:'# \'%\''},
             },
             series: {0: {targetAxisIndex:0},
                 1:{targetAxisIndex:1},
             },
         };

         var chart = new google.visualization.ColumnChart(document.getElementById('profits_per_month_chart'));

         chart.draw(data, options);
    }
</script>

<div class="row">
    <div class="panel panel-info index-panel">
        <div class="panel-heading">Balances</div>
            <table class="table">
                <tbody>
                    <tr>
                        <th>Days Total</th>
                        <th>Profit Total</th>
                        <th>Month profit</th>
                    </tr>
                    <tr class="text-info">
                        <td>
                            @{ 
                                var totalDays = (Model.Data.Last().DateTimeStamp - Model.Data.First().DateTimeStamp).TotalDays;
                            }
                            @totalDays
                        </td>
                        @if (Model.Profit > 0)
                        {
                            @:<td class="text-success">
                        }
                        else
                        {
                            @:<td class="text-danger">
                        }
                        @Model.Profit RUB (@Model.ProfitPercent %)
                        </td>
                        @if (Model.LastMonthProfit > 0)
                        {
                            @: <td class="text-success">
                        }
                        else
                        {
                            @:<td class="text-danger">
                        }
                        @Model.LastMonthProfit RUB (@Model.LastMonthProfitPercent %)
                        </td>
                    </tr>
                    <tr>
                        <th>Max </th>
                        <th>Min</th>
                        <th>Drawdown</th>
                    </tr>
                    <tr>
                        <td class="text-info">
                            @Model.Max RUB
                        </td>
                        <td class="text-info">
                            @Model.Min RUB
                        </td>
                        <td class="text-danger">
                            @Model.DrawDown RUB
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

<div class="row">
    <div id="balances_chart" class="chart"></div>
</div>
<div class="row">
    <div id="profits_per_month_chart" class="chart"></div>
</div>
<div class="row index-panel">
    <p class="text-muted text-center">Information is updated every working day at 7:30 pm (Moscow time, GMT +3)</p>
</div>
<div class="row">
    <div class="panel panel-warning index-panel">
        <div class="panel-heading">Cash flow</div>
        <div class="panel-body">
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Payment</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var flow in Model.Flows)
                    {
                        if (flow.Payment > 0)
                        {
                            @:<tr class="success">
                        }
                        else
                        {
                            @:<tr class="danger">
                        }
                        <td>@flow.DateTimeStamp.ToString("MMM d yyyy", CultureInfo.InvariantCulture)</td>
                                    <td><b>@flow.Payment RUB </b></td>
                                    <td>@flow.Description</td>
                                    @:</tr>
                    }                
                </tbody>
            </table>
        </div>
    </div>
</div>
<br />
<div class="row">
    <div class="panel panel-primary index-panel">
        <div class="panel-heading">About</div>
        <div class="container">
            <h4>Experimental project</h4>
            <p class="text-justify">
                This open non-commercial experiment is intended to prove the success of investing strategies we have been developing for several years.
                We use various financial instruments to get investing profit, we invest our own private funds only and pay taxes according to the Russian Law.
                In case of success (i.e. stable valuable profit) we plan to launch a commercial project in 2020 that will allow others to invest and earn money.
            </p>
            <h4>Risks notification</h4>
            <p class="text-justify">
                Successful investments do not garantee profit in the future.
                Trading on stock exchange is associated with a certain risk and can lead to both high yield and money loss. Always consider risks and invest spare funds only.
            </p>
        </div>
    </div>
</div>

